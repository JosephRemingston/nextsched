generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  // or "sqlite" / "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  refreshTokens RefreshToken[]

  buyerAppointments  Appointment[] @relation("BuyerAppointments")
  sellerAppointments Appointment[] @relation("SellerAppointments")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   // Encrypted refresh token
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Appointment {
  id        String   @id @default(cuid())
  buyerId   String
  sellerId  String
  start     DateTime
  end       DateTime
  eventId   String?   // Google Calendar eventId
  createdAt DateTime @default(now())

  buyer  User @relation("BuyerAppointments", fields: [buyerId], references: [id])
  seller User @relation("SellerAppointments", fields: [sellerId], references: [id])
}